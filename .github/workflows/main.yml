name: react buld                     # Workflow 이름
on: 
  push:                           # Event 감지
    branches :
      - actionTEST # 해당 브랜치에서 push가 일어날때 실행

defaults: 
  run: 
    working-directory: ./client # 실행되는 폴더 경로 저장

jobs:                                 # Job 설정
  build:                              # Job ID
    name: react build start        # Job 이름
    runs-on: ubuntu-18.04             # Job 가상환경 인스턴스
    env:
      CI: false # Treating warnings as errors because process.env.CI = true. 경고가 에러로 나와서
      working-directory: ./client
      
    strategy:
      matrix:
        node-version: [12.13.0]     # 12.13.0 버전 실행
        

    steps:                            # Steps
      - name: checkout source code    # 파일 가져오기
        uses: actions/checkout@v2  # 브랜치 확인
        with:
          ref: 'actionTEST'

      - name: use node version ${{matrix.node-version}} # 노드 버전 설치
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: ${{env.working-directory}}/package-lock.json
      
      # - name: version check node
      #   run: node -v
      # - name: version check npm
      #   run: npm -v
      # - name: version check yarn
      #   run: yarn -v

      # - name: cache node modules # node_models를 캐시하여 매번npm install 시간 아끼기
      #   uses: actions/cache@v2
      #   with:
      #     path: node_modules # 저장할 대상 폴더
      #     key: ${{runner.OS}}-build-${{hashFiles('**/yarn.lock')}} # 저장후 식별 가능 키값, runner.os 는 리눅스가 된다고 한다.
      #     restore-keys: |     # 키가 일치한게 없을때 차선책의 키(옵션)
      #       ${{ runner.OS }}-build-
      #       ${{ runner.OS }}-

      - name: yarn install           # 설치
        run: yarn install
        # working-directory: ${{ env.working-directory }}

      - name: yarn build              # 빌드시작
        run: yarn build
        # working-directory: ${{ env.working-directory }}        
      
      - name: gh설치
        run: yarn add gh-pages
        # working-directory: ${{ env.working-directory }}  
      
      # - name: gh확인
      #   run: gh-pages -v
      # - name: gh올리기
      #   run: gh-pages -d ${{ env.working-directory }}/dist

      - name: aws 버전확인
        run: aws --version

      - name: aws help
        run: aws help


      - name: aws help2
        run: aws s3 help

      - name: config set1
        run: aws configure set access_key ${{ secrets.AWS_ACCESS_KEY_ID }}
      - name: config set2 
        run: aws configure set secret_key ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: aws config
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
        run: aws configure list

      # - name: aws 버킷리스트
      #   run: aws --endpoint-url=https://kr.object.ncloudstorage.com --region kr-standard  s3 ls  
      # - name: aws 버킷 리스트
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   run: aws --endpoint-url=https://kr.object.ncloudstorage.com s3 ls


      # - name: aws 오브젝트 리스트
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   run: aws --endpoint-url=https://kr.object.ncloudstorage.com s3 ls s3://palda-action-build


      # ncloude 에 배포하기 테스트
      # - name: Deploy                  
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   run: |
      #     aws --endpoint-url=https://kr.object.ncloudstorage.com  \
      #       s3 cp \
      #       s3://palda-action-build/palda-action-container